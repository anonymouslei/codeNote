##lambda 

## class method vs static method in python
the @classmethod decorator, is a builtin function decorator
that is an expression that gets evaluated after your function is
defined.
### classmethod
```python
class C(object):
    @classmethod
    def fun(cls, arg1, arg2, ...):
       ....
fun: function that needs to be converted into a class method
returns: a class method for function.
```

### static method
a static method does not receive an implicit first argument.
```python
class C(object):
    @staticmethod
    def fun(arg1, arg2, ...):
        ...
returns: a static method for function fun.
```
- a static method is also a method which is bound to the class and not the object of the class.
- a static method can not access or modify class state.
- it is present in a class because it makes sense for the method to be present in class.

### class method vs static method
- a class method takes cls as first parameter while a static method needs no specific parameter.
- a class method can access or modify class state while a static method can not access or modify it
- In general, static methods know nothing about class state.
they are utility type methods that take some parameters and work
upon those parameters. on the other hand class methods must have class as parameter.
- We use @classmethod decorator in python to create a class method and we use #staticmethod
decorator to create a static method in python

### when we use
- We generally use class method to create factory methods. Factory methods return class object ( similar to a constructor ) for different use cases.
- We generally use static methods to create utility functions.

```python
# Python program to demonstrate 
# use of class method and static method. 
from datetime import date 

class Person: 
	def __init__(self, name, age): 
		self.name = name 
		self.age = age 
	
	# a class method to create a Person object by birth year. 
	@classmethod
	def fromBirthYear(cls, name, year): 
		return cls(name, date.today().year - year) 
	
	# a static method to check if a Person is adult or not. 
	@staticmethod
	def isAdult(age): 
		return age > 18

person1 = Person('mayank', 21) 
person2 = Person.fromBirthYear('mayank', 1996) 

print person1.age 
print person2.age 

# print the result 
print Person.isAdult(22) 


```